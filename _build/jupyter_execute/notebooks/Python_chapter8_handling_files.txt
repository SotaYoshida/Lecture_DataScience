from google.colab import drive
drive.mount('/content/drive')

!ls /content/drive/MyDrive/AdDS2021/chapter5_data/*

!ls /content/drive/MyDrive/AdDS2021/chapter5_data/*txt 

filename = "/content/drive/My Drive/AdDS2021/chapter5_data/test.txt" 
inp = open(filename,"r") # "r"はread(読み出し)を意味するオプション
lines = inp.readlines()
inp.close()

print(lines)

for line in lines:
    print(line)

a = "test character\t"
b = "test2 \n"
print("a", a, "←タブが隠れている")
print("b", b, "←改行される")
### strip関数をもちいて...
print("a.strip()", a.strip(),"b.strip()",b.strip())

for line in lines:
    print(line.strip())

for line in lines:
    print(line.rstrip())

hit = 0 #
for line in lines:
    if "###" in line:
        hit += 1 
        continue
    if hit == 0 :
        continue #hitが0の状態では何もしない
    print(line.rstrip())

hit = 0 #
nlines = []
for line in lines:
    if "###" in line:
        hit += 1 
        continue
    if hit == 0 :
        continue #hitが0の状態では何もしない
    nlines += [line]
print(nlines)

for line in nlines:
    print(line.split())

for line in nlines:
    if "," in line :
        print(line.rstrip().split(","))
    else :
        print(line.rstrip().split())

nums = [] #数字のリストなのでnumsとした
profs = [] #プロフィールのリストなのでprofsとした

for line in nlines:
    if "," in line :
        nums += [ line.rstrip().split(",") ]
    else :
        profs += [ line.rstrip().split()]
print("nums", nums)
print("profs", profs)

##リスト内包表記を使った実装
nums = []
for line in nlines:
    if "," in line : 
        tl =  line.rstrip().split(",")
        nums += [ [ int(tmp) for tmp in tl] ]
print(nums)

## map関数を使った実装
nums = []
for line in nlines:
    if "," in line : 
        nums += [ list(map(int, line.rstrip().split(",") )) ]
print(nums)

text = "abcdあいうえお"
text = text.replace("abcd", "1234")
print("置換や→",text)
print("除去にも→", text.replace("4", ""))

filename = "/content/drive/My Drive/AdDS2021/chapter5_data/test_replace.txt" 
oup = open(filename,"w")  ## oup は"output"の気持ち...
for line in lines:
    print(line.rstrip().replace("さん","様"), file=oup) # file=[openしたファイル]にすることで、printする先をファイルに指定できます。
oup.close() #ファイルはきちんと閉じる.

filename = "/content/drive/My Drive/AdDS2021/chapter5_data/python_handling_test.csv" #読み込むファイルのパスの指定

inp=open(filename,"r")
csv_lines=inp.readlines() 
inp.close()
print("行数は",len(csv_lines))
for i in range(5):
    print(csv_lines[i].rstrip())

import pandas as pd 
df = pd.read_csv(filename)
print(df)

#処理Aのための関数
#input_strが、"年月日 時刻(h:m:s) 午前/午後 GMT+9" という文字列である、という文字列の[構造]を知った上での実装になっていることに注意
def make_time_24h(input_str):        
    time  = input_str.split()[1]
    AMPM = input_str.split()[2]
    hms = time.split(":")
    h = int(hms[0])
    if AMPM == "午前":
        output_str = time 
    else :
        if h != 12:
            output_str = str(h +12)+":"+hms[1]+":"+hms[2]
        else:
            output_str = str(h)+":"+hms[1]+":"+hms[2] # 12時xx分だけは別の取り扱いが必要
    return output_str

nlines=[] #整理したものをリストとしてまとめるための空のリスト
for nth,line in enumerate(csv_lines[1:]): 
    nline = line.rstrip().replace('"','').split(",") # 改行文字の除去、ダブルクォーテーションの除去, カンマで分割    
    # この時点でnlineは0:時刻 1:性別, ...のリストとなっているはず print()でcheckしてみよう
    # 処理A)
    time = make_time_24h(nline[0])
    #print("nline[0]", nline[0], "time", time)
    M_or_F = nline[1] #性別

    #　処理B)
    points = [ int(nline[k].split()[0]) for k in range(2,7)] #各科目の値だけのリスト(points)を作成
    # 上記をmap関数にしてみよう。

    nline = [time, M_or_F]+points  #リストを連結(時刻,性別と各科目の値を同じ階層で結合)して、nlineという名前で上書き
    nlines += [ nline ]

    # うまく編集できたか400行おきほどでprintしてチェックしてみる
    if nth % 400 == 0 :
        print("編集前", line.rstrip())
        print("編集後", nline)
        print("")

import numpy as np
points = [ [] for i in range(5)]
for tmp in nlines:
    for i in range(5):
        points[i]+=[tmp[2+i]]
print("points", np.array(points))
print("各科目の平均スコア:", [np.mean(points[i]) for i in range(5)])

filename = "/content/drive/My Drive/AdDS2021/chapter5_data/kakei.xlsx" #読み込むファイルのパスの指定

## (最新のPython環境では非推奨) xlrd(excel read)ライブラリを使用する
#import xlrd 
#wb = xlrd.open_workbook(filename) #作業するbook(excelファイル)を開いてwbという変数名をつける
#print("xlrd: シート名のリスト", wb.sheet_names())

## (推奨) Pandasライブラリを使用する場合
import pandas as pd
input_file = pd.ExcelFile(filename)
sheet_names = input_file.sheet_names
print("pandas: シート名",sheet_names)

Sheet1 = pd.read_excel(filename, sheet_name="Sheet1")
print("行,列の数", Sheet1.shape)

for i in range(5):
    print( list(Sheet1.iloc[i]) )

# 画像がいっぱい生成されると面倒なので画像を保存するフォルダを作成しておく
!mkdir /content/drive/My\ Drive/AdDS2021/chapter5_data/kakei_cor_pic 

!pip install japanize_matplotlib 

## ※xlrdを使用しているので将来的に動かない可能性アリ
import xlrd
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import japanize_matplotlib
import time

class ebook:
    def __init__(self,inpf):
        self.inpf = inpf
        self.wb = xlrd.open_workbook(inpf)
        self.sheets = self.wb.sheets
        self.ns,self.sname = self.wb.nsheets, self.wb.sheet_names()
        s_kikou=[]; s_kakei=[]
        for i, sheetname in enumerate(self.sname):
            if "Sheet" in sheetname :
                s_kakei += [ i ]
            elif "S" in sheetname :
                s_kikou += [ i ]
        self.s_kakei,self.s_kikou = s_kakei,s_kikou
    def indices(self):
        return self.s_kakei, self.s_kikou
    def readkakei(self,ikakei) :
        ws = self.wb.sheet_by_index(ikakei)
        nr = ws.nrows; nc=ws.ncols
        premode = True
        items = []
        for ii in range(nr): 
            trow = ws.row_values(ii)
            hit = 0
            if premode == True:
                for jj,tmp in enumerate(trow):
                    try :
                        if "市" in tmp:
                            hit += 1
                    except:
                        hit = hit
                if hit > 5:
                    premode=False
                    i_kakei=[];p_kakei=[]
                    for jj,tmp in enumerate(trow):
                        if "市" in tmp:
                            i_kakei += [jj]
                            p_kakei +=[ tmp ] 
                    v_kakei = [ ]
            else:                    
                if ii >= 22:
                    if type(trow[8]) is str and trow[8] != "":
                        v_kakei += [ [trow[jj+1] for jj in i_kakei] ]
                        items += [trow[8]]                         
        return i_kakei, p_kakei, v_kakei,items
    def readkikou(self,ikikou):
        ws = self.wb.sheet_by_index(ikikou)
        nr = ws.nrows; nc=ws.ncols
        quantities = [];v_kikou=[]
        premode=True
        for ii in range(nr): 
            trow = ws.row_values(ii)
            if premode :
                if any(["市" in tmp for tmp in trow]):
                    Tplaces = trow[1:]
                    premode=False
            else:
                quantities += [ trow[0] ]
                v_kikou += [ trow[1:] ]
        return Tplaces, v_kikou,quantities

def seasoncolor(month):
    if month <= 2 or month ==12:
        return "blue"
    elif 3 <= month <=5:
        return "green"
    elif 6 <= month <=8:
        return "red"
    elif 9<= month <=11:
        return "orange"
    return tcol

def plot_cor(x,y,item,quantity,place,corrcoef):    
    fig = plt.figure(figsize=(4,4))
    ax = fig.add_subplot(1,1,1)
    ax.set_facecolor("#e0e0e0")
    ax.set_title(place+"   r="+str("%8.2f" % corrcoef).strip())
    ax.set_xlabel(item);ax.set_ylabel(quantity)
    ax.grid(True,axis="both",color="w", linestyle="dotted", linewidth=0.8)
    for i in range(len(x)):
        tcol=seasoncolor(i+1)
        ax.scatter(x[i],y[i],marker="o",s=5,color=tcol,zorder=20000,alpha=0.7)
        ax.text(x[i],y[i],str(i+1)+"月",color="k",fontsize=8)
    plt.savefig(oupdir + "corr_"+item+"vs"+quantity+"_at_"+place+".png",dpi=300) 
    plt.close()

def calcor(date,places,items, Vs_kakei,Tplaces,quantities,Vs_kikou):
    hit = 0; num_pic=0
    Vs = [] 
    for j_K,place in enumerate(places):
        for j_T, Tplace in enumerate(Tplaces):
            if place != Tplace :
                continue
            for ik,item in enumerate(items):
                kvalue = np.array([ Vs_kakei[i][ik][j_K] for i in range(len(Vs_kakei))])
                quantity=quantities[iT]
                Tvalue = np.array([ Vs_kikou[i][iT][j_T] for i in range(len(Vs_kikou))])
                if all(Tvalue) == 0.0: ## missing value in climate data
                    continue
                if printlog:
                    print("@", place," ",item,kvalue," VS ",quantity, ",",Tvalue)
                corrcoef=np.corrcoef(kvalue,Tvalue)[0][1]
                Vs += [ [ corrcoef, item, quantity, place] ]
                if abs(corrcoef) > pthre:
                    hit += 1
                    if pltmode==True:
                        plot_cor(kvalue,Tvalue,item,quantity,place,corrcoef)                       
                        num_pic += 1
    print("hit:",hit, " number of picture", num_pic)

if __name__ == "__main__":
    ti=time.time()
    T=True; F=False

    inpf = "/content/drive/My Drive/AdDS2021/chapter5_data/kakei.xlsx"
    oupdir = "/content/drive/My Drive/AdDS2021/chapter5_data/kakei_cor_pic/" #適宜置き換える
    iT = 6  # iT=6: 日平均気温
    printlog= F #条件にhitした都市の品目と気候データを逐次printするかどうか. (Fを推奨)
    pthre= 0.90 ## corrplotを描く相関係数のthreshold 
    pltmode = T ## T:plotする F:計算のみ ** 画像をいちいちplotして保存する必要がない場合Fを推奨
    year="2017" 

    wb=ebook(inpf)
    s_kakei,s_kikou=wb.indices()   
    Vs_kakei=[]; Vs_kikou=[];dates=[]
    for i,ind_kakei in enumerate(s_kakei):
        i_places,places, v_kakei,items = wb.readkakei(ind_kakei)
        Tplaces, v_kikou, quantities  = wb.readkikou(s_kikou[i])
        if i+1 < 10:
            date=year+"0"+str(i+1)
        else:
            date=year+str(i+1)
        dates += [date]
        Vs_kakei += [ v_kakei ]
        Vs_kikou += [ v_kikou ]
    calcor(dates,places,items,Vs_kakei,Tplaces,quantities,Vs_kikou)    

    tf=time.time()
    print("Elapced time[sec]:", tf-ti)
